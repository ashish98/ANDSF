package com.elitecorelib.andsf.pojo;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.1.4.2
//
// Created by Quasar Development at 04-03-2015
//
//---------------------------------------------------


import java.io.Serializable;
import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class Policy extends AttributeContainer implements KvmSerializable,Comparable<Policy>,Serializable
{
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public Integer enable=0;
    
    public String PLMN;
    
    public Integer policyId=0;
    
    public String policyName;
    
    public ArrayList< PrioritizedAccess>prioritizedAccess =new ArrayList<PrioritizedAccess>();
    
    public Boolean roaming=false;
    
    public Integer rulePriority=0;
    
    public ArrayList< TimeOfDay>timeOfDay =new ArrayList<TimeOfDay>();
    
    public Integer updatePolicy=0;
    
    public ValidityArea validityArea;
    
    public String version;

    public Policy ()
    {
    }

    public Policy (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        SoapObject soapObject=(SoapObject)inObj;  
        if (soapObject.hasProperty("enable"))
        {	
	        java.lang.Object obj = soapObject.getProperty("enable");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.enable = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.enable = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("PLMN"))
        {	
	        java.lang.Object obj = soapObject.getProperty("PLMN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.PLMN = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.PLMN = (String)obj;
            }    
        }
        if (soapObject.hasProperty("policyId"))
        {	
	        java.lang.Object obj = soapObject.getProperty("policyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.policyId = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.policyId = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("policyName"))
        {	
	        java.lang.Object obj = soapObject.getProperty("policyName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.policyName = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.policyName = (String)obj;
            }    
        }
        if (soapObject.hasProperty("prioritizedAccess"))
        {	
	        int size = soapObject.getPropertyCount();
	        this.prioritizedAccess = new ArrayList<PrioritizedAccess>();
	        for (int i0=0;i0< size;i0++)
	        {
	            PropertyInfo info=new PropertyInfo();
	            soapObject.getPropertyInfo(i0, info);
                java.lang.Object obj = info.getValue();
	            if (obj!=null && info.name.equals("prioritizedAccess"))
	            {
                    java.lang.Object j =info.getValue();
	                PrioritizedAccess j1= (PrioritizedAccess)__envelope.get(j,PrioritizedAccess.class);
	                this.prioritizedAccess.add(j1);
	            }
	        }
        }
        if (soapObject.hasProperty("roaming"))
        {	
	        java.lang.Object obj = soapObject.getProperty("roaming");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.roaming = new Boolean(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Boolean){
                this.roaming = (Boolean)obj;
            }    
        }
        if (soapObject.hasProperty("rulePriority"))
        {	
	        java.lang.Object obj = soapObject.getProperty("rulePriority");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.rulePriority = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.rulePriority = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("timeOfDay"))
        {	
	        int size = soapObject.getPropertyCount();
	        this.timeOfDay = new ArrayList<TimeOfDay>();
	        for (int i0=0;i0< size;i0++)
	        {
	            PropertyInfo info=new PropertyInfo();
	            soapObject.getPropertyInfo(i0, info);
                java.lang.Object obj = info.getValue();
	            if (obj!=null && info.name.equals("timeOfDay"))
	            {
                    java.lang.Object j =info.getValue();
	                TimeOfDay j1= (TimeOfDay)__envelope.get(j,TimeOfDay.class);
	                this.timeOfDay.add(j1);
	            }
	        }
        }
        if (soapObject.hasProperty("updatePolicy"))
        {	
	        java.lang.Object obj = soapObject.getProperty("updatePolicy");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.updatePolicy = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.updatePolicy = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("validityArea"))
        {	
	        java.lang.Object j = soapObject.getProperty("validityArea");
	        this.validityArea = (ValidityArea)__envelope.get(j,ValidityArea.class);
        }
        if (soapObject.hasProperty("version"))
        {	
	        java.lang.Object obj = soapObject.getProperty("version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.version = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.version = (String)obj;
            }    
        }


    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return enable;
        }
        if(propertyIndex==1)
        {
            return this.PLMN!=null?this.PLMN:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==2)
        {
            return policyId;
        }
        if(propertyIndex==3)
        {
            return this.policyName!=null?this.policyName:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==4)
        {
            return roaming;
        }
        if(propertyIndex==5)
        {
            return rulePriority;
        }
        if(propertyIndex==6)
        {
            return updatePolicy;
        }
        if(propertyIndex==7)
        {
            return this.validityArea!=null?this.validityArea:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==8)
        {
            return this.version!=null?this.version:SoapPrimitive.NullSkip;
        }
        if(propertyIndex>=+9 && propertyIndex< + 9+this.prioritizedAccess.size())
        {
            return this.prioritizedAccess.get(propertyIndex-(+9));
        }
        if(propertyIndex>=+9+this.prioritizedAccess.size() && propertyIndex< + 9+this.prioritizedAccess.size()+this.timeOfDay.size())
        {
            return this.timeOfDay.get(propertyIndex-(+9+this.prioritizedAccess.size()));
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 9+prioritizedAccess.size()+timeOfDay.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "enable";
            info.namespace= "";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "PLMN";
            info.namespace= "";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "policyId";
            info.namespace= "";
        }
        if(propertyIndex==3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "policyName";
            info.namespace= "";
        }
        if(propertyIndex==4)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "roaming";
            info.namespace= "";
        }
        if(propertyIndex==5)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "rulePriority";
            info.namespace= "";
        }
        if(propertyIndex==6)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "updatePolicy";
            info.namespace= "";
        }
        if(propertyIndex==7)
        {
            info.type = ValidityArea.class;
            info.name = "validityArea";
            info.namespace= "";
        }
        if(propertyIndex==8)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "version";
            info.namespace= "";
        }
        if(propertyIndex>=+9 && propertyIndex <= +9+this.prioritizedAccess.size())
        {
            info.type = PrioritizedAccess.class;
            info.name = "prioritizedAccess";
            info.namespace= "";
        }
        if(propertyIndex>=+9+this.prioritizedAccess.size() && propertyIndex <= +9+this.prioritizedAccess.size()+this.timeOfDay.size())
        {
            info.type = TimeOfDay.class;
            info.name = "timeOfDay";
            info.namespace= "";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    @Override
    public String getInnerText() {
        return null;
    }

    @Override
    public void setInnerText(String s) {

    }

	@Override
	public String toString() {
		return "Policy [enable=" + enable + "\n PLMN=" + PLMN + "\n policyId="
				+ policyId + "\n policyName=" + policyName
				+ "\n prioritizedAccess=" + prioritizedAccess + "\n roaming="
				+ roaming + "\n rulePriority=" + rulePriority + "\n timeOfDay="
				+ timeOfDay + "\n updatePolicy=" + updatePolicy
				+ "\n validityArea=" + validityArea + "\n version=" + version
				+ "]";
	}

	/**
	 * Here Policy will be comapred on basis of its priority Values
	 * If Priority will be low then it is has higher precedence.
	 * 
	 */
	public int compareTo(Policy another) {
		
		int returnVal = 0;
		if(this.rulePriority < another.rulePriority){
			returnVal = -1;
		}else if(this.rulePriority == another.rulePriority){
			returnVal = 0;
		}else{
			returnVal = 1;
		}
		return returnVal;
	}
}
