package com.elitecorelib.andsf.pojo;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.1.4.2
//
// Created by Quasar Development at 04-03-2015
//
//---------------------------------------------------


import java.io.Serializable;
import java.util.Hashtable;

import org.ksoap2.serialization.AttributeContainer;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import com.elitecorelib.andsf.exception.InvalidDataException;
import com.elitecorelib.andsf.utility.CustomMessage;

public class TimeOfDay extends AttributeContainer implements KvmSerializable,Serializable
{
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	public String toString() {
		return "TimeOfDay [dateStart=" + dateStart + "\n dateStop="
				+ dateStop + "\n timeStart=" + timeStart + "\n timeStop="
				+ timeStop + "]";
	}

	public String dateStart;
    
    public String dateStop;
    
    public String timeStart;
    
    public String timeStop;

    public TimeOfDay ()
    {
    }

    public TimeOfDay (java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        SoapObject soapObject=(SoapObject)inObj;  
        if (soapObject.hasProperty("dateStart"))
        {	
	        java.lang.Object obj = soapObject.getProperty("dateStart");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.dateStart = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.dateStart = (String)obj;
            }    
        }
        if (soapObject.hasProperty("dateStop"))
        {	
	        java.lang.Object obj = soapObject.getProperty("dateStop");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.dateStop = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.dateStop = (String)obj;
            }    
        }
        if (soapObject.hasProperty("timeStart"))
        {	
	        java.lang.Object obj = soapObject.getProperty("timeStart");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.timeStart = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.timeStart = (String)obj;
            }    
        }
        if (soapObject.hasProperty("timeStop"))
        {	
	        java.lang.Object obj = soapObject.getProperty("timeStop");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.timeStop = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.timeStop = (String)obj;
            }    
        }


    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return this.dateStart!=null?this.dateStart:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==1)
        {
            return this.dateStop!=null?this.dateStop:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==2)
        {
            return this.timeStart!=null?this.timeStart:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==3)
        {
            return this.timeStop!=null?this.timeStop:SoapPrimitive.NullSkip;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 4;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "dateStart";
            info.namespace= "";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "dateStop";
            info.namespace= "";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "timeStart";
            info.namespace= "";
        }
        if(propertyIndex==3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "timeStop";
            info.namespace= "";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    @Override
    public String getInnerText() {
        return null;
    }

    @Override
    public void setInnerText(String s) {

    }

	public void validate(boolean isTimeStart, boolean isTimeStop, boolean isDateStart, boolean isDateStop) throws InvalidDataException {
					
		if( !isTimeStart && isTimeStop && !isDateStart && !isDateStop){
			throw new InvalidDataException(CustomMessage.invalidTimeOfDayMessage);
		}
		
		
		if( isTimeStart && !isTimeStop && !isDateStart && !isDateStop){
			throw new InvalidDataException(CustomMessage.invalidTimeOfDayMessage);
		}
		
		if( !isTimeStart && isTimeStop && isDateStart && !isDateStop){
			throw new InvalidDataException(CustomMessage.invalidTimeOfDayMessage);
		}
						
		if( isTimeStart && !isTimeStop && !isDateStart && isDateStop){
			throw new InvalidDataException(CustomMessage.invalidTimeOfDayMessage);
		}
						
	}

	
}
