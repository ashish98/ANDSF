package com.elitecore.andsf.ws;

import com.elitecore.andsf.data.AccessNetworkInformationWLAN;
import com.elitecore.andsf.data.Circular;
import com.elitecore.andsf.data.DiscoveryInformation;
import com.elitecore.andsf.data.InitializeRequest;
import com.elitecore.andsf.data.InitializeResponse;
import com.elitecore.andsf.data.Policy;
import com.elitecore.andsf.data.PolicyResponse;
import com.elitecore.andsf.data.PrioritizedAccess;
import com.elitecore.andsf.data.TimeOfDay;
import com.elitecore.andsf.data.UE_Location;
import com.elitecore.andsf.data.ValidityArea;
import com.elitecore.andsf.data.circular.Geo_Location;
import com.elitecore.andsf.ws.impl.InitialRequestProcessor;



public class ANDSFWebService implements IANDSFWS {

	public static final String MODULE = "[ANDSFWSImpl] ";
	
	InitialRequestProcessor initialRequestProcessor = new InitialRequestProcessor(); 
	
	@Override
	public PolicyResponse GetPolicyRequest(String session, String tag,UE_Location ue_Location, String HexToken, String tz){
		
		System.out.println(MODULE + " GetPolicyRequest ,session"  + session);
		System.out.println(MODULE + " GetPolicyRequest ,tag"  + tag);
		System.out.println(MODULE + " UE_Location "  + ue_Location);
		System.out.println(MODULE + " HexToken "  + HexToken);
		System.out.println(MODULE + " tz "  + session);
		
		PolicyResponse policyResponse = new PolicyResponse();
	try{	
		DiscoveryInformation[] discoveryInformation = new DiscoveryInformation[2];
		discoveryInformation[0] = new DiscoveryInformation();
		
		discoveryInformation[0].setAccessNetworkArea(null);
		
		
		/*
		 * Intialization of accessNetworkInformationRef started 
		 */
		AccessNetworkInformationWLAN accessNetworkInformationWLAN = new AccessNetworkInformationWLAN();
		accessNetworkInformationWLAN.setSsidHidden(false);
		accessNetworkInformationWLAN.setSSIDName("BT");
		//accessNetworkInformationWLAN.setAndsf(false);
		
		//used by client to determine Wi-Fi location radius 
		accessNetworkInformationWLAN.setGeoRadius("600.0");
				
		accessNetworkInformationWLAN.setHexPassworde(false);
		
		//used by client to plot Wi-Fi location .optional 
		accessNetworkInformationWLAN.setLatitude("23.039568000000003");
		accessNetworkInformationWLAN.setLongtitude("72.56600399999999");
		
		//accessNetworkInformationWLAN.setNetworkID(-1);
		accessNetworkInformationWLAN.setNodeName("ElitecoreNodeName");
		//accessNetworkInformationWLAN.setPriority(1);
		accessNetworkInformationWLAN.setSecurityType("wpa2");
		
		accessNetworkInformationWLAN.setSignalLevel(-1);
		accessNetworkInformationWLAN.setUseWPAPSK(true);
		//accessNetworkInformationWLAN.setWlanEAPList(null);
		accessNetworkInformationWLAN.setPassword("test1234");
		accessNetworkInformationWLAN.setPolicyHotspot(true);
		

		discoveryInformation[0].setAccessNetworkInformationWLAN(accessNetworkInformationWLAN);
		discoveryInformation[0].setAccessNetworkType(3);

		
		
		/**
		 * Starting Intialization Discovery Policy 2
		 */
		discoveryInformation[1] = new DiscoveryInformation();
		discoveryInformation[1].setAccessNetworkArea(null);
						
				AccessNetworkInformationWLAN aniw1 = new AccessNetworkInformationWLAN();
				aniw1.setSsidHidden(false);
				aniw1.setSSIDName("iosmacmini");
				aniw1.setHexPassworde(false);
				aniw1.setPassword("elitecore123");
				
				aniw1.setSecurityType("wpa2");				
								
				aniw1.setGeoRadius("600.0");
				aniw1.setLatitude("23.039568000000003");
				aniw1.setLongtitude("72.56600399999999");
											
				//aniw1.setAndsf(false);
								 																					 				
				
				//aniw1.setNetworkID(-1);
				aniw1.setNodeName("SAP2 Node");
				//aniw1.setPriority(2);
				
				aniw1.setSignalLevel(-1);
				aniw1.setUseWPAPSK(true);
				//aniw1.setWlanEAPList(null);
				
		discoveryInformation[1].setAccessNetworkInformationWLAN(aniw1);
		discoveryInformation[1].setAccessNetworkType(3);

		
		
		
	
		/**
		 * Policy Initialization start Here
		 */
		Policy[] policy = new Policy[2];
		policy[0] = new Policy();
		policy[0].setPLMN(null);
		
		//used by client to determine whether policy is enabled
		policy[0].setEnable(1);
		//Client needs a unique ID generated by server to determine if policy has changed . The Id will change if current policy kota has some value changed compare to previous kota
		policy[0].setPolicyId(6);
		policy[0].setPolicyName("ElitecorePolicy1");
			
			PrioritizedAccess[] prioritizedAccess = new PrioritizedAccess[3];
			
			prioritizedAccess[0] = new PrioritizedAccess();
			prioritizedAccess[0].setAccessId("BT");
			prioritizedAccess[0].setAccessNetworkPriority(1);
			prioritizedAccess[0].setAccessTechnology(3);
			//prioritizedAccess.setSecondaryAccessId("none");
										
			prioritizedAccess[1] = new PrioritizedAccess();
			prioritizedAccess[1].setAccessId("iosmacmini");
			prioritizedAccess[1].setAccessNetworkPriority(2);
			prioritizedAccess[1].setAccessTechnology(3);			
			//prioritizedAccess2.setSecondaryAccessId("test1");
			
			prioritizedAccess[2] = new PrioritizedAccess();
			prioritizedAccess[2].setAccessId("Tst");
			prioritizedAccess[2].setAccessNetworkPriority(3);
			prioritizedAccess[2].setAccessTechnology(1);
			
		policy[0].setPrioritizedAccess(prioritizedAccess);
		policy[0].setRoaming(false);
		policy[0].setRulePriority(2);
			
				TimeOfDay[] timeOfDays = new TimeOfDay[2];
				timeOfDays[0] = new TimeOfDay();
				timeOfDays[0].setDateStart("2013-06-04");
				timeOfDays[0].setDateStop("2014-10-31");
				timeOfDays[0].setTimeStart("04:00:00");
				timeOfDays[0].setTimeStop("15:50:50");
				timeOfDays[1] = new TimeOfDay();
				timeOfDays[1].setDateStart("2014-10-31");
				timeOfDays[1].setDateStop("2015-06-12");
				timeOfDays[1].setTimeStart("16:30:00");
				timeOfDays[1].setTimeStop("22:50:50");
				
		policy[0].setTimeOfDay(timeOfDays);
		
		
		//This Field is not used by clients
		policy[0].setUpdatePolicy(0);
		
			ValidityArea validityArea = new ValidityArea();
			validityArea.setRPLMN(null);
			validityArea.setWLAN_Location(null);
				Geo_Location [] geo_Location_s = new Geo_Location[1];
					Circular[] circulars = new Circular[1];
					circulars[0] = new Circular();
					circulars[0].setLatitude("23.039568000000003");
					circulars[0].setLongitude("72.56600399999999");
					circulars[0].setRadius("9000");
								
				geo_Location_s[0] = new Geo_Location();
				geo_Location_s[0].setCircular(circulars);
											
			validityArea.setGeo_Location_(geo_Location_s);
			
			validityArea.setLocation_3GPP(null);
			
			validityArea.setLocation_3GPP2(null);
			
			validityArea.setWiMAX_Location(null);
																
		policy[0].setValidityArea(validityArea);
		
		
		
		
		/**
		 *Intilisation of policy 1 
		 */
		
		policy[1] = new Policy();
		policy[1].setPLMN(null);
		
		//used by client to determine whether policy is enabled
		policy[1].setEnable(1);
		//Client needs a unique ID generated by server to determine if policy has changed . 
		//The Id will change if current policy kota has some value changed compare to previous kota
		policy[1].setPolicyId(7);
		policy[1].setPolicyName("TestPolicy2");
			
			PrioritizedAccess[] prioritizedAccess1 = new PrioritizedAccess[3];									
			/**
			* Possible Values Access Technology
			*		0  Reserved
			*		1  3GPP 
			*		2  Reserved
			*		3  WLAN
			*		4  WiMAX
			*/
			
			prioritizedAccess1[0] = new PrioritizedAccess();
			prioritizedAccess1[0].setAccessTechnology(3);
			//THis is ssid for wlan : accessid
			prioritizedAccess1[0].setAccessId("iosmacmini");
			prioritizedAccess1[0].setAccessNetworkPriority(4);			
			//prioritizedAccess.setSecondaryAccessId("none");

			prioritizedAccess1[1] = new PrioritizedAccess();
			prioritizedAccess1[1].setAccessTechnology(1);
			prioritizedAccess1[1].setAccessId("tet");
			prioritizedAccess1[1].setAccessNetworkPriority(5);	
			
			
			prioritizedAccess1[2] = new PrioritizedAccess();
			prioritizedAccess1[2].setAccessTechnology(3);
			//THis is ssid for wlan : accessid
			prioritizedAccess1[2].setAccessId("BT");
			prioritizedAccess1[2].setAccessNetworkPriority(6);
			
			
			
			
			
			
			
		policy[1].setPrioritizedAccess(prioritizedAccess1);
		policy[1].setRoaming(false);
		
		policy[1].setRulePriority(3);
			
				TimeOfDay[] timeOfDays1 = new TimeOfDay[1];
				timeOfDays1[0] = new TimeOfDay();
				timeOfDays1[0].setDateStart("2014-10-31");
				timeOfDays1[0].setDateStop("2014-10-31");
				timeOfDays1[0].setTimeStart("15:51:00");
				timeOfDays1[0].setTimeStop("16:29:59");
				
		policy[1].setTimeOfDay(timeOfDays1);
		
		
		//This Field is not used by clients
		policy[1].setUpdatePolicy(0);
		
			ValidityArea validityArea1 = new ValidityArea();
			validityArea1.setRPLMN(null);
			validityArea1.setWLAN_Location(null);
				
			Geo_Location [] geo_Location_s1 = new Geo_Location[1];
					Circular[] circulars1 = new Circular[2];
					circulars1[0] = new Circular();
					circulars1[0].setLatitude("23.039568000000003");
					circulars1[0].setLongitude("72.56600399999999");
					
					circulars1[1] = new Circular();
					circulars1[0].setRadius("9000");
					circulars1[1].setLatitude("3.0461084");
					circulars1[1].setLongitude("101.6960159");
					circulars1[1].setRadius("9000");
									
				geo_Location_s1[0] = new Geo_Location();	
				geo_Location_s1[0].setCircular(circulars1);
											
			validityArea1.setGeo_Location_(geo_Location_s1);
			
			validityArea1.setLocation_3GPP(null);
			
			validityArea1.setLocation_3GPP2(null);
			
			validityArea1.setWiMAX_Location(null);
																
		policy[1].setValidityArea(validityArea1);

		System.out.println(MODULE+"Policy Response for session id :"+session+" Policy :  "+policy);
		System.out.println(MODULE+"Policy Response for session id :"+session+" Discovery Information :  "+discoveryInformation);
		policyResponse.setDiscoveryInformation(discoveryInformation);
		policyResponse.setPolicy(policy);
		policyResponse.setResultCode("3000");

		System.out.println(MODULE+"Policy Response for session id :"+session+" Policy Response :  "+policyResponse);
		
	}catch(Exception e){
		e.printStackTrace();
		System.out.println(MODULE+"Exception into Webservice"+e);
	}
		return policyResponse;
	}
	
	@Override
	public InitializeResponse InitializeRequest(String username, String password, String IMEI, String deviceType, String IMSI, String MSISDN,
			String feature) {
		System.out.println(MODULE + " intialize request for username "  + username);
		
		InitializeRequest initializeRequest = new InitializeRequest(username,password,IMEI,deviceType,IMSI,MSISDN,feature);
		
		return initialRequestProcessor.processInitialRequest(initializeRequest);
	}

	@Override
	public String GetSampleRequest(String param1) {
		System.out.println(MODULE + " Sample request for this getsample" +param1 );
		return "GoodOne" ;
	}
}
